<resources>
    <string name="app_name">AboutQA</string>
    <string name="qa">QA</string>
    <string name="start">Начать</string>
    <string name="back">Назад</string>

    <!--Основные понятия -->
    <string name="QA"> - это совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и эксплуатации программного обеспечения (ПО) информационных систем, предпринимаемых на разных стадиях жизненного цикла ПО, для обеспечения требуемого уровня качества выпускаемого продукта. </string>
    <string name="QA_2">Простым языком, QA - это процесс улучшения качества ПО, через улучшение процесса разработки ПО.</string>
    <string name="QC">- это совокупность действий, проводимых над продуктом в процессе разработки, для получения информации о его актуальном состоянии в разрезах: "готовность продукта к выпуску", "соответствие зафиксированным требованиям", "соответствие заявленному уровню качества продукта.</string>
    <string name="ST">- это одна из техник контроля качества, включающая в себя активности по планированию работ (Test Management), проектированию тестов (Test Design), выполнению тестирования (Test Execution) и анализу полученных результатов (Test Analysis). </string>
    <string name="SQ">- это совокупность характеристик программного обеспечения, относящихся к его способности удовлетворять установленные и предполагаемые потребности.</string>
    <string name="bug">Bug — это отклонение фактического результата (actual result) от ожидаемого результата (expected result).</string>
    <string name="verification_text">Верификация (Verification) - это процесс оценки системы или её компонентов с целью определения удовлетворяют ли результаты текущего этапа разработки условиям, сформированным в начале этого этапа [IEEE]. Т.е. выполняются ли наши цели, сроки, задачи по разработке проекта, определенные в начале текущей фазы. </string>
    <string name="validation_text">Валидация (validation) — это определение соответствия разрабатываемого ПО ожиданиям и потребностям пользователя, требованиям к системе [BS7925-1]</string>
    <string name="verivication_validation_other">Также можно встретить иную интерпритацию: Процесс оценки соответствия продукта явным требованиям (спецификациям) и есть верификация (verification), в то же время оценка соответствия продукта ожиданиям и требованиям пользователей — есть валидация (validation). </string>
    <string name="tg_text">Повысить вероятность того, что приложение, предназначенное для тестирования, будет работать правильно при любых обстоятельствах.\nПовысить вероятность того, что приложение, предназначенное для тестирования, будет соответствовать всем описанным требованиям.\nПредоставление актуальной информации о состоянии продукта на данный момент.</string>

    <!--SQL-->
    <string name="SQL">Если говорить, просто SQL - это язык Баз данных.</string>
    <string name="DataBase">База данных (БД) - упорядоченный набор логически взаимосвязанных данных, используемых совместно, и которые хранятся в одном месте. Если коротко, то простейшая БД это обычная таблица со строками и столбцами в которой хранится разного рода информация </string>
    <string name="CreateDataBase">Для создания базы данных используется команда CREATE DATABASE. Она имеет следующий синтаксис: CREATE DATABASE exampledb;\nУстановка базы данных : USE exampledb;\nУдаление базы данных: DROP DATABASE productsdb;</string>

    <!--тестовые артефакты-->
    <string name="test_documentation">В соответствие с процессами или методологиями разработки ПО, во время проведения тестирования создается и используется определенное количество тестовых артефактов (документы, модели и т.д.). Наиболее распространенными тестовыми артефактами являются:</string>
        <string name="test_plan">План тестирования (Test Plan) - это документ описывающий весь объем работ по тестированию, начиная с описания объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования, специальных знаний, а также оценки рисков с вариантами их разрешения.</string>
        <string name="test_case">Набор тест кейсов и тестов (Test Case и Test suite) - это последовательность действий, по которой можно проверить соответствует ли тестируемая функция установленным требованиям.</string>
        <string name="bug_report">Дефекты / Баг Репорты (Bug Reports / Defects) - это документы, описывающие ситуацию или последовательность действий приведшую к некорректной работе объекта тестирования, с указанием причин и ожидаемого результата.</string>

    <!--Software Development Model -->
    <string name="sdm">структура, систематизирующая различные виды проектной деятельности, их взаимодействие и последовательность в процессе разработки ПО. Выбор той или иной модели зависит от масштаба  сложности проекта, предметной области, доступных ресурсов и множества других факторов. \n \nВыбор модели разработки ПО серьёзно влияет на процесс тестирования, определяя выбор
стратегии, расписание, необходимые ресурсы и т.д.</string>
    <string name="sdm_understanding">Знать и понимать модели разработки ПО необходимо затем, чтобы уже с первых дней работы понимать, что происходит вокруг, что, зачем и почему вы делаете. Многие начинающие тестировщики отмечают, что ощущение бессмысленности происходящего посещает их, даже если текущие задания интересны. Чем полнее вы будете представлять картину происходящего на проекте, тем яснее вам будет виден ваш собственный вклад в общее дело и смысл того, чем вы занимаетесь.</string>
    <string name="watrefall"> - предполагает однократное выполнение каждой из фаз проекта, которые, в свою очередь, строго следуют друг за другом \n \n
        - Общее планирование
            \n- Работа с требованиями
            \n - Техническая архитектура
            \n - Детализированный дизайн
            \n - Разработка и отладка
            \n - Интеграция и модульные тесты
            \n - Приёмочное тестирование
            \n - Создание отчётности
    </string>
    <string name="iterativemodel"><b>Итерационная инкрементальная модель</b> - является фундаментальной основой современного подхода к разработке ПО. Как следует из названия модели, ей свойственна определённая двойственность:\n\n
    • с точки зрения жизненного цикла модель является итерационной, т.к. подразумевает многократное повторение одних и тех же стадий;\n\n
    • с точки зрения развития продукта (приращения его полезных функций) модель является инкрементальной.</string>
    <string name="agile_text"><b>Гибкая разработка</b> - представляет собой совокупность различных подходов к разработке ПО и базируется на т. н. «agile-манифесте»\n\n
    • Люди и взаимодействие важнее процессов и инструментов.
    \n • Работающий продукт важнее исчерпывающей документации.
    \n • Сотрудничество с заказчиком важнее согласования условий контракта.
    \n • Готовность к изменениям важнее следования первоначальному плану.</string>

    <string name="sdm_comparison_text"><b>Водопадная модель</b>\n\n
        <b>Преимущества:</b>\n
        • У каждой стадии есть чёткий проверяемый результат.
        \n • В каждый момент времени команда выполняет один вид работы.
        \n • Хорошо работает для небольших задач.
        \n \n  <b>Недостатки:</b>
        \n • Полная неспособность адаптировать проект к изменениям в требованиях.
        \n • Крайне позднее создание работающего продукта.
        \n \n <b>Тестирование</b>
        \n Тестирование с середины проекта.
    </string>
    <string name="sdm_comparison_text_2"><b>Итерационная инкрементальная</b>\n\n
        <b>Преимущества:</b>\n
        • Достаточно раннее прототипирование.
        \n • Простота управления итерациями.
        \n • Декомпозиция проекта на управляемые итерации.
        \n \n  <b>Недостатки:</b>
        \n • Недостаточная гибкость внутри итераций.
        \n • Сложность устранения проблем, пропущенных на ранних стадиях развития проекта.
        \n \n <b>Тестирование:</b>
        \n • В определённые моменты итераций.
        \n • Повторное тестирование (после доработки) уже проверенного ранее.
    </string>
    <string name="sdm_comparison_text_3"><b>Agile/Гибкая разработка</b> \n\n
        <b>Преимущества:</b>\n
        • Максимальное вовлечение заказчика.
        \n • Много работы с требованиями.
        \n • Тесная интеграция тестирования и разработки.
        \n • Минимизация документации.
        \n \n <b>Недостатки:</b>
        \n • Сложность реализации для больших проектов.
        \n • Сложность построения стабильных процессов.
        \n \n <b>Тестирование:</b>
        \n • В определённые моменты итераций и в любой необходимый момент.
    </string>

    <!--STLC Software Testing Life cycle-->
    <string name="stlc"><b>Жизненный Цикл Тестирования</b> - это последовательность действий, которые мы выполняем для проведения испытаний программного обеспечения.</string>
    <string name="testing_stages">
        \n <b>- 1. Общее планирование и анализ требований</b>
        \n <b>- 2. Уточнение критериев приёмки</b>
        \n <b>- 3. Уточнение стратегии тестирования</b>
        \n <b>- 4. Разработка Тест - Кейсов</b>
        \n <b>- 5. Выполнение тест-кейсов и фиксация найденных дефектов</b>
        \n <b>- 6. Анализ результатов тестирования и отчётность</b>
    </string>
    <string name="basic_planing">Стадия тестирования объективно необходима как минимум для того, чтобы иметь ответ на такие вопросы, как: что нам предстоит тестировать; как много будет работы; какие есть сложности; всё ли необходимое у нас есть и т.п. Как правило, получить ответы на эти вопросы невозможно без анализа требований, т.к. именно требования являются первичным источником ответов.</string>
    <string name="acceptance_criteria">Позволяет сформулировать или уточнить метрики и признаки возможности или необходимости начала тестирования , приостановки  и возобновления тестирования, завершения или прекращения тестирования .</string>
    <string name="testing_strategy">Представляет собой ещё одно обращение к пла нированию, но уже на локальном уровне: рассматриваются и уточняются те части стратегии тестирования, которые актуальны для текущей итерации.</string>
    <string name="creating_test_cases">Посвящена разработке, пересмотру, уточнению, доработке, переработке и прочим действиям с тест-кейсами, наборами тест-кейсов, тестовыми сценариями и иными артефактами, которые будут использоваться при непосредственном выполнении тестирования.</string>
    <string name="lc_test_cases">Выполнение тест-кейсов и фиксация найденных дефектов тесно связаны между собой и фактически выполняются параллельно: дефекты фиксируются сразу по факту их обнаружения в процессе выполнения тест-кейсов. Однако зачастую после выполнения всех тест-кейсов и написания всех отчётов о найденных дефектах проводится явно выделенная стадия уточнения, на которой все отчёты о дефектах рассматриваются повторно с целью формирования единого понимания проблемы и уточнения таких характеристик дефекта, как важность и срочность.</string>
    <string name="reporting">Анализ результатов тестирования и отчётность также тесно связаны между собой и выполняются практически параллельно. Формулируемые на стадии анализа результатов выводы напрямую зависят от плана тестирования, критериев приёмки и уточнённой стратегии, полученных на стадиях 1, 2 и 3. Полученные выводы оформляются на стадии 8 и служат основой для стадий 1, 2 и 3 следующей итерации тестирования. Таким образом, цикл замыкается.</string>
</resources>
